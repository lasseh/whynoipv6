# This is part of my nginx repo: https://github.com/lasseh/nginx-conf
# Redirect HTTP to HTTPS
server {
    listen                  80;
    listen                  [::]:80;
    server_name             whynoipv6.com www.whynoipv6.com api.whynoipv6.com;

    # Allow ACME challenge
    include                 prefabs.d/letsencrypt.conf;

    location / {
        return              301 https://$server_name$request_uri;
    }
}
# Frontend
server {
    listen                  443 ssl http2;
    listen                  [::]:443 ssl http2;
    server_name             whynoipv6.com www.whynoipv6.com;

    # SSL
    ssl_certificate         /etc/letsencrypt/live/whynoipv6.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/whynoipv6.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/whynoipv6.com/chain.pem;

    # Security Headers
    #include                 sites-security/whynoipv6.com.conf;
    
    # Logging
    access_log              /var/log/nginx/access.log cloudflare;
    error_log               /var/log/nginx/error.log warn;
    
    # Additional config
    include                 nginx.d/general.conf;

    # Root
    root                    /usr/share/nginx/html/ipv6;
    index                   index.html;

    # Frontend
    location / {
        try_files           $uri $uri/ /index.html;
    }
}

# HTTPS Reverse Proxy
server {
    listen                  443 ssl http2;
    listen                  [::]:443 ssl http2;
    server_name             api.whynoipv6.com;

    # SSL
    ssl_certificate         /etc/letsencrypt/live/whynoipv6.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/whynoipv6.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/whynoipv6.com/chain.pem;

    # Security Headers
    #include                 sites-security/ipv6.fail.conf;

    # Logging
    access_log              /var/log/nginx/access.log cloudflare;
    error_log               /var/log/nginx/error.log warn;
    
    # Additional config
    include                 nginx.d/general.conf;

    # Returns the client's IP
    location /ip {
        add_header          'Access-Control-Allow-Origin' '*' always;
        add_header          Content-Type "application/json";
        return              200 '{"ip":"$remote_addr"}\n';
    }

    # Backend
    location / {
        include             nginx.d/proxy.conf;
        proxy_pass          http://localhost:9001;
    }
}
