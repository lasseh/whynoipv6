// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: asn.sql

package db

import (
	"context"
)

const CreateASN = `-- name: CreateASN :one
INSERT INTO asn(number,name)
VALUES ($1, $2) ON CONFLICT DO NOTHING
RETURNING id, number, name
`

type CreateASNParams struct {
	Number int32
	Name   string
}

func (q *Queries) CreateASN(ctx context.Context, arg CreateASNParams) (Asn, error) {
	row := q.db.QueryRow(ctx, CreateASN, arg.Number, arg.Name)
	var i Asn
	err := row.Scan(&i.ID, &i.Number, &i.Name)
	return i, err
}

const GetASByNumber = `-- name: GetASByNumber :one
SELECT id, number, name 
FROM asn
WHERE number = $1
LIMIT 1
`

func (q *Queries) GetASByNumber(ctx context.Context, number int32) (Asn, error) {
	row := q.db.QueryRow(ctx, GetASByNumber, number)
	var i Asn
	err := row.Scan(&i.ID, &i.Number, &i.Name)
	return i, err
}
